<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="GeneratedWPF" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\GeneratedWPF.zip;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="T001" xml:space="preserve">
    <value>&lt;TextBox x:Name="Txb{0}"
                         Grid.Row="{1}"
                         Grid.Column="{2}"
                         TabIndex="{3}"                  Height="25"
                         Text="{{Binding {0},
                                        NotifyOnValidationError=true,
                                        UpdateSourceTrigger=PropertyChanged,
                                        ValidatesOnDataErrors=true}}" /&gt;</value>
  </data>
  <data name="T002" xml:space="preserve">
    <value>&lt;Border x:Name="Border{0}" BorderThickness="0,0,0,1" Grid.Row="{1}" Grid.ColumnSpan="2" Margin="0,0,0,0"&gt;
	                &lt;Border.BorderBrush&gt;
        	            &lt;LinearGradientBrush EndPoint="0,0" StartPoint="1,0"&gt;
                        	&lt;GradientStop Color="#FF3975A0" Offset="0"/&gt;
                        &lt;GradientStop Color="#FFD3E2EC" Offset="1"/&gt;
                	    &lt;/LinearGradientBrush&gt;
        	        &lt;/Border.BorderBrush&gt;
	            &lt;/Border&gt;

		&lt;Label x:Name="Lbl{0}"
                       Grid.Row="{1}"
                       Grid.Column="{2}"
                       VerticalAlignment="Center"
                       Margin="20,0"
                       Content="{{Binding ConverterParameter={0},
                                         Converter={{StaticResource displayNameConverter}}}}"
                       Focusable="False" /&gt;</value>
  </data>
  <data name="T003" xml:space="preserve">
    <value>&lt;Window x:Class="{0}.{2}Window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
	{6}
        Title="{2} Detail"
        WindowStartupLocation="CenterScreen"
        FontSize="14"
        Width="1000"
        Height="800"&gt;
    &lt;Window.Resources&gt;
        &lt;ns01:DisplayNameConverter x:Key="displayNameConverter" /&gt;
	{5}
    &lt;/Window.Resources&gt;

    &lt;Window.DataContext&gt;
        &lt;ns01:{2}ViewModel /&gt;
    &lt;/Window.DataContext&gt;

    &lt;ScrollViewer VerticalScrollBarVisibility="Auto"&gt;

    &lt;StackPanel Margin="5"&gt;
        &lt;Label
            Margin="10"
            HorizontalContentAlignment="Right"
            BorderThickness="0,0,0,5"
            Content="{2} Detail View "
            FontSize="20"
            FontWeight="Bold"
            Foreground="#FF072C2C"&gt;
            &lt;Label.BorderBrush&gt;
                &lt;LinearGradientBrush StartPoint="1,1" EndPoint="0,0"&gt;
                    &lt;GradientStop Offset="0" Color="#FF4E9595" /&gt;
                    &lt;GradientStop Offset="1" Color="#FFD7ECEC" /&gt;
                &lt;/LinearGradientBrush&gt;
            &lt;/Label.BorderBrush&gt;
        &lt;/Label&gt;

	&lt;Grid  Margin="20"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="35*" /&gt;
                    &lt;ColumnDefinition Width="65*" /&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                &lt;Grid.RowDefinitions&gt;
                    {3}
		    &lt;RowDefinition Height="*" /&gt;
                &lt;/Grid.RowDefinitions&gt;
                     {4}
        &lt;/Grid&gt;
    &lt;/StackPanel&gt;
    &lt;/ScrollViewer&gt;
&lt;/Window&gt;</value>
  </data>
  <data name="T004" xml:space="preserve">
    <value>private string {0};

		[DisplayName("{1}:")]
		public string {1}
		{{
			get {{ return {0}; }}
			set {{ this.SetProperty(ref {0}, value); }}
		}}</value>
  </data>
  <data name="T005" xml:space="preserve">
    <value>&lt;CheckBox x:Name="Chb{0}"
                          Grid.Row="{1}"
                          Grid.Column="{2}"
                          TabIndex="{3}"                  
                          Margin="5,0"
                          VerticalAlignment="Center"
                          IsChecked="{{Binding {4}}}" /&gt;</value>
  </data>
  <data name="T006" xml:space="preserve">
    <value>private bool {0};

		[DisplayName("{1}:")]
		public bool {1}
		{{
			get {{ return {0}; }}
			set {{ this.SetProperty(ref {0}, value); }}
		}}</value>
  </data>
  <data name="T007" xml:space="preserve">
    <value>&lt;ComboBox x:Name="cb{0}"
                  Grid.Row="{1}"
                  Grid.Column="{2}"
                  Height="25"
                  TabIndex="{3}"
                  SelectedItem="{{Binding {0}}}" 
                  ItemsSource="{{Binding {4}Source}}" /&gt;</value>
  </data>
  <data name="T008" xml:space="preserve">
    <value>private {2}ViewModel {0};

		[DisplayName("{1}:")]
		public {2}ViewModel {1}
		{{
			get {{ return {0}; }}
			set {{ this.SetProperty(ref {0}, value); }}
		}}</value>
  </data>
  <data name="T009" xml:space="preserve">
    <value>public ObservableCollection&lt;{0}ViewModel&gt; {0}Source {{ get; set; }}</value>
  </data>
  <data name="T010" xml:space="preserve">
    <value>&lt;DockPanel Grid.Row="{1}" Grid.Column="{2}" Margin="5"&gt;

            &lt;StackPanel DockPanel.Dock="Right"&gt;
                &lt;Button x:Name="BtnAdd{4}"
                        Margin="3,0,3,3"
                        HorizontalContentAlignment="Left"
                        Click="BtnAdd{4}_Click"
                        Content="+ Pridať"
                        Padding="5" /&gt;

                &lt;Button x:Name="BtnUpdate{4}"
                        Margin="3,3"
                        HorizontalContentAlignment="Left"
                        Click="BtnUpdate{4}_Click"
                        Content="* Upraviť"
                        Padding="5" /&gt;

                &lt;Button x:Name="BtnRemove{4}"
                        Margin="3,3"
                        HorizontalContentAlignment="Left"
                        Click="BtnRemove{4}_Click"
                        Content="- Odstrániť"
                        Padding="5" /&gt;
            &lt;/StackPanel&gt;

            &lt;DataGrid x:Name="{0}"
                      AlternatingRowBackground="{{DynamicResource {{x:Static SystemColors.InfoBrushKey}}}}"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"
                      CanUserResizeRows="False"
                      ColumnWidth="*"
                      IsReadOnly="True"
                      ItemsSource="{{Binding {4}}}"
                      PreviewKeyDown="{0}_PreviewKeyDown"
                      RowHeaderWidth="20"
                      RowHeight="25"
                      SelectedItem="{{Binding {4}Selected}}"
                      TabIndex="{3}"&gt;

	            &lt;!--  Row Vertical Alignment  --&gt;
        	    &lt;DataGrid.CellStyle&gt;
	                &lt;Style TargetType="{{x:Type DataGridCell}}"&gt;
                	    &lt;Setter Property="Template"&gt;
        	                &lt;Setter.Value&gt;
	                            &lt;ControlTemplate TargetType="{{x:Type DataGridCell}}"&gt;
                        	        &lt;Grid Background="{{TemplateBinding Background}}"&gt;
                	                    &lt;ContentPresenter VerticalAlignment="Center" /&gt;
        	                        &lt;/Grid&gt;
	                            &lt;/ControlTemplate&gt;
                        	&lt;/Setter.Value&gt;
                	    &lt;/Setter&gt;
        	        &lt;/Style&gt;
	            &lt;/DataGrid.CellStyle&gt;
            &lt;/DataGrid&gt;

        &lt;/DockPanel&gt;</value>
  </data>
  <data name="T011" xml:space="preserve">
    <value>[DisplayName("{1}")]
        public ObservableCollection&lt;{0}ViewModel&gt; {1} {{ get; set; }}

        public {0}ViewModel {1}Selected
        {{
            get;
            set;
        }}

        public void Add{1}({0}ViewModel item)
        {{
            {1}.Add(item);
        }}

        public void Remove{1}Selected()
        {{
            if ({1}Selected != null)
                {1}.Remove({1}Selected);
        }}</value>
  </data>
  <data name="T012" xml:space="preserve">
    <value>private void BtnAdd{0}_Click(object sender, RoutedEventArgs e)
        {{
            {1}Window addItemDialog = new {1}Window();

            if (addItemDialog.ShowDialog() == true)
                ViewModel.Add{0}(addItemDialog.ViewModel); 
        }}

        private void BtnUpdate{0}_Click(object sender, RoutedEventArgs e)
        {{
            new {1}Window(ViewModel.{0}Selected).ShowDialog();
        }}

        private void BtnRemove{0}_Click(object sender, RoutedEventArgs e)
        {{
            if (MessageBox.Show("Naozaj chcete odstranit zvolený záznam?", "Odstrániť záznam?", MessageBoxButton.OKCancel, MessageBoxImage.Question) == MessageBoxResult.OK)
                ViewModel.Remove{0}Selected();
        }}


        private void DataGrid{0}_PreviewKeyDown(object sender, KeyEventArgs e)
        {{
            if (e.Key == Key.Delete)
                BtnRemove{0}_Click(null, null);
        }}</value>
  </data>
  <data name="T013" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace {0}
{{
    /// &lt;summary&gt;
    /// CODE WAS GENERATED BY WPF GENERATOR
    /// Interaction logic for SampleXAML.xaml
    /// &lt;/summary&gt;
    public partial class {2}Window : Window
    {{
        public {2}ViewModel ViewModel {{ get {{ return this.DataContext as {2}ViewModel; }} }}

        public {2}Window()
        {{
            InitializeComponent();

            // WPF GENERATOR - FAKE INSTANCE, REPLACE BY YOUR LOGIC
            //-------------------------------------------------------------------
            this.DataContext = new Jpinsoft.RandomPocoGenerator.RPGenerator().Generate&lt;{2}ViewModel&gt;(3);
            //-------------------------------------------------------------------
        }}

        public {2}Window({2}ViewModel viewModel)
        {{
            InitializeComponent();

            this.DataContext = viewModel;
        }}

	{3}
   }}
}}</value>
  </data>
  <data name="T014" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
{1}

namespace {0}
{{
    public class {2}ViewModel : ViewModelBase
    {{
        public {2}ViewModel()
        {{
        }}
	{3}
    }}
}}</value>
  </data>
  <data name="T015" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace {0}
{{
    public class ViewModelBase : INotifyPropertyChanged
    {{
        #region Properties

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region Property changed

        protected virtual bool SetProperty&lt;T&gt;(ref T storage, T value, 
            [CallerMemberName] string propertyName = null)
        {{
            if (Equals(storage, value)) return false;

            storage = value;
            OnPropertyChanged(propertyName);

            return true;
        }}

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {{
            var eventHandler = PropertyChanged;
            if (eventHandler != null)
            {{
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }}
        }}

        #endregion
    }}

}}</value>
  </data>
  <data name="T016" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;

namespace {0}
{{
    public class DisplayNameConverter : IValueConverter
    {{
        #region Interface Implementations

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {{
            return GetDisplayName(value, targetType, parameter);
        }}

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {{
            throw new NotImplementedException();
        }}

        #endregion

        public static string GetDisplayName(object value, Type targetType, object parameter)
        {{
            if (value != null)
            {{
                var propInfo = value.GetType().GetProperty(parameter.ToString());
                if (propInfo != null)
                {{
                    var attrib = propInfo.GetCustomAttributes(typeof(DisplayNameAttribute), false);
                    if (attrib.Any())
                        return ((DisplayNameAttribute)attrib.First()).DisplayName;
                }}
            }}
            return string.Empty;
        }}

    }}
}}</value>
  </data>
  <data name="T017" xml:space="preserve">
    <value>&lt;DatePicker x:Name="DatePicker{0}"
                    Grid.Row="{1}"
                    Grid.Column="{2}"
                    Height="25"
                    VerticalAlignment="Center"
                    SelectedDate="{{Binding {0}}}"
                    TabIndex="{3}" /&gt;</value>
  </data>
  <data name="T018" xml:space="preserve">
    <value>private DateTime {0};

		[DisplayName("{1}:")]
		public DateTime {1}
		{{
			get {{ return {0}; }}
			set {{ this.SetProperty(ref {0}, value); }}
		}}</value>
  </data>
  <data name="T019" xml:space="preserve">
    <value>&lt;DockPanel Grid.Row="{1}"
                   Grid.Column="{2}"
                   HorizontalAlignment="Stretch"&gt;
            &lt;TextBox x:Name="Txb{0}"
                     Width="60"
                     Height="25"
                     Margin="5,0"
                     DockPanel.Dock="Right"
                     Text="{{Binding ElementName=Slider{0},
                                    Path=Value}}" /&gt;
            &lt;Slider x:Name="Slider{0}"
                    Height="25"
                    IsSnapToTickEnabled="True"
                    Minimum="{4}"
                    Maximum="{5}"
                    TabIndex="{3}"
                    TickPlacement="BottomRight"
                    Value="{{Binding {0}}}" /&gt;

        &lt;/DockPanel&gt;</value>
  </data>
  <data name="T020" xml:space="preserve">
    <value>private {2} {0};

		[DisplayName("{1}:")]
		public {2} {1}
		{{
			get {{ return {0}; }}
			set {{ this.SetProperty(ref {0}, value); }}
		}}</value>
  </data>
  <data name="T021" xml:space="preserve">
    <value>&lt;Button x:Name="BtnOk" 
                Grid.Row="{0}" 
                Grid.Column="{1}" 
                Content="Ok" 
                Margin="0,30,200,10"
                HorizontalAlignment="Right"
                IsDefault="True"                           
                Width="150" 
                Height="36" 
                Click="BtnOk_Click" /&gt;

        &lt;Button x:Name="BtnCancel" 
                Content="Cancel"   
                Grid.Row="{0}" 
                Grid.Column="{1}"
                Width="150"
                Margin="0,30,0,10"
                HorizontalAlignment="Right"
                IsCancel="True"
                Height="36" /&gt;</value>
  </data>
  <data name="T022" xml:space="preserve">
    <value>private void BtnOk_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = true;
            this.Close();
        }</value>
  </data>
  <data name="T023" xml:space="preserve">
    <value>&lt;ObjectDataProvider x:Key="{0}Source" MethodName="GetValues"
                        ObjectType="{{x:Type sys:Enum}}"&gt;
            &lt;ObjectDataProvider.MethodParameters&gt;
                &lt;x:Type TypeName="{1}:{0}"/&gt;
            &lt;/ObjectDataProvider.MethodParameters&gt;
        &lt;/ObjectDataProvider&gt;</value>
  </data>
  <data name="T024" xml:space="preserve">
    <value>&lt;ComboBox x:Name="cb{0}"
                  Grid.Row="{1}"
                  Grid.Column="{2}"
                  Height="25"
                  TabIndex="{3}"
                  SelectedItem="{{Binding {0}}}" 
                  ItemsSource="{{Binding Mode=OneWay, Source={{StaticResource {4}Source}} }}" /&gt;</value>
  </data>
  <data name="T025" xml:space="preserve">
    <value>private {2} {0};

		[DisplayName("{1}:")]
		public {2} {1}
		{{
			get {{ return {0}; }}
			set {{ this.SetProperty(ref {0}, value); }}
		}}</value>
  </data>
  <data name="T026" xml:space="preserve">
    <value>xmlns:{0}="clr-namespace:{1};assembly={2}"</value>
  </data>
  <data name="T027" xml:space="preserve">
    <value>using {0};</value>
  </data>
  <data name="T028" xml:space="preserve">
    <value>&lt;DockPanel Grid.Row="{1}"
                    Grid.Column="{2}"&gt;
            &lt;Button x:Name="btn{0}"
		    DockPanel.Dock="Right" 
                    Height="25" 
                    Margin="5" 
                    Padding="5"
		    Click="btn{0}_Click"&gt;
                ...
            &lt;/Button&gt;
            &lt;TextBox x:Name="txb{0}"
                  Height="25"
                  TabIndex="{3}"
                  IsReadOnly="True"
                  Text="{{Binding {0}}}" /&gt;
        &lt;/DockPanel&gt;</value>
  </data>
  <data name="T029" xml:space="preserve">
    <value>private void btn{0}_Click(object sender, RoutedEventArgs e)
        {{
            {1}Window detailWindow = new {1}Window(this.ViewModel.{0});

            detailWindow.ShowDialog();
        }}</value>
  </data>
  <data name="T030" xml:space="preserve">
    <value>&lt;Page Include="{0}"&gt;
      &lt;Generator&gt;MSBuild:Compile&lt;/Generator&gt;
      &lt;SubType&gt;Designer&lt;/SubType&gt;
    &lt;/Page&gt;</value>
  </data>
  <data name="T031" xml:space="preserve">
    <value>&lt;Compile Include="{0}"&gt;
      &lt;DependentUpon&gt;{1}&lt;/DependentUpon&gt;
    &lt;/Compile&gt;</value>
  </data>
  <data name="T032" xml:space="preserve">
    <value>&lt;Compile Include="{0}" /&gt;</value>
  </data>
  <data name="T033" xml:space="preserve">
    <value>&lt;TextBox x:Name="Txb{0}"
                         Grid.Row="{1}"
                         Grid.Column="{2}"
                         TabIndex="{3}"           
                         Width="200"
                         Height="25"
                         HorizontalAlignment="Left"
                         Text="{{Binding {0}}}" /&gt;</value>
  </data>
  <data name="T034" xml:space="preserve">
    <value>private void BtnShow{0}_Click(object sender, RoutedEventArgs e)
        {{
            new {0}Window().ShowDialog();
        }}</value>
  </data>
  <data name="T035" xml:space="preserve">
    <value>&lt;Button
            x:Name="BtnShow{0}"
            Width="185"
            Height="30"
            Margin="10"
            Click="BtnShow{0}_Click"
            Content="Show {0}" /&gt;</value>
  </data>
</root>